package Front;

import Conexion.ClsConexion;
import com.mysql.jdbc.Connection;
import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class frmClientsC extends javax.swing.JFrame {

    ClsConexion CON;
    Connection CN;

    public frmClientsC() {
        initComponents();
        lblErrorDni.setVisible(false);
        lblErrorNombre.setVisible(false);
        lblErrorApellido.setVisible(false);
        lblErrorCorreo.setVisible(false);
        lblErrorDireccion.setVisible(false);
        lblErrorTelefono.setVisible(false);
        lblErrorFecha.setVisible(false);
        this.setLocationRelativeTo(this);
        CON = new ClsConexion();
        CN = CON.getConnection();
        ListarTabla();
    }

    private void Limpiar() {
        // Se limpian todos los campos
        txtDni.setText("");
        txtNombre.setText("");
        txtApellido.setText("");
        txtCorreo.setText("");
        txtDireccion.setText("");
        txtTelefono.setText("");
        txtFecha.setText("");

        // Se ocultan todos los errores
        lblErrorDni.setVisible(false);
        lblErrorNombre.setVisible(false);
        lblErrorApellido.setVisible(false);
        lblErrorCorreo.setVisible(false);
        lblErrorDireccion.setVisible(false);
        lblErrorTelefono.setVisible(false);
        lblErrorFecha.setVisible(false);
    }

    private void Limpiare() {

        // Se ocultan todos los errores
        lblErrorDni.setVisible(false);
        lblErrorNombre.setVisible(false);
        lblErrorApellido.setVisible(false);
        lblErrorCorreo.setVisible(false);
        lblErrorDireccion.setVisible(false);
        lblErrorTelefono.setVisible(false);
        lblErrorFecha.setVisible(false);
    }

    private void ListarTabla() {

        // Definición de la configuración de la tabla y sus columnas
        DefaultTableModel modelo = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modelo.addColumn("DNI");
        modelo.addColumn("NOMBRE");
        modelo.addColumn("APELLIDO");
        modelo.addColumn("CORREO ELECTRONICO    ");
        modelo.addColumn("DIRECCION      ");
        modelo.addColumn("TELEFONO");
        modelo.addColumn("FECHA DE NACIMIENTO");

        // Cargado de datos a la tabla
        try {
            // Comunicación con la base de datos 
            String ConsLista = "SELECT * FROM tblClients";
            PreparedStatement PS = CN.prepareStatement(ConsLista);
            ResultSet RS = PS.executeQuery();

            // Recorer los resultados y cargalos a una lista
            while (RS.next()) {
                Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                modelo.addRow(Lista);
            }
            tbListClients.setModel(modelo);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,
                    "Error al listar los datos: " + e.getMessage(),
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtDni = new javax.swing.JTextField();
        btnRegistrar = new javax.swing.JButton();
        lblErrorDni = new javax.swing.JLabel();
        lblErrorApellido = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbListClients = new javax.swing.JTable();
        btnCancelar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblErrorCorreo = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblErrorDireccion = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        lblErrorFecha = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblErrorTelefono = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        lblErrorNombre = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txtFecha = new javax.swing.JTextField();
        txtTelefono = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButtonSearchNom = new javax.swing.JButton();
        jButtonSearchDni = new javax.swing.JButton();
        jButtonSearchApe = new javax.swing.JButton();
        jButtonSearchCorr = new javax.swing.JButton();
        jButtonSearchDire = new javax.swing.JButton();
        jButtonSearchFec = new javax.swing.JButton();
        jButtonSearchTel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestion De Clientes");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(555, 361));
        jPanel1.setLayout(null);

        txtDni.setBackground(new java.awt.Color(0, 153, 255));
        txtDni.setForeground(new java.awt.Color(51, 0, 51));
        txtDni.setToolTipText("");
        txtDni.setAlignmentY(10.0F);
        txtDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDniActionPerformed(evt);
            }
        });
        jPanel1.add(txtDni);
        txtDni.setBounds(19, 50, 160, 35);

        btnRegistrar.setBackground(new java.awt.Color(0, 0, 255));
        btnRegistrar.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        btnRegistrar.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrar.setText("REGISTRAR CLIENTE");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegistrar);
        btnRegistrar.setBounds(19, 347, 184, 40);

        lblErrorDni.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorDni.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorDni.setText("* Error, ingrese DNI válido");
        lblErrorDni.setAlignmentY(10.0F);
        jPanel1.add(lblErrorDni);
        lblErrorDni.setBounds(35, 91, 125, 13);

        lblErrorApellido.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorApellido.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorApellido.setText("* Error, ingrese Apellido válido");
        lblErrorApellido.setAlignmentY(10.0F);
        jPanel1.add(lblErrorApellido);
        lblErrorApellido.setBounds(375, 91, 148, 13);

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setText("DNI DEL CLIENTE");
        jLabel1.setAlignmentY(10.0F);
        jPanel1.add(jLabel1);
        jLabel1.setBounds(33, 26, 118, 18);

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel2.setText("APELLIDO DEL CLIENTE");
        jLabel2.setAlignmentY(10.0F);
        jPanel1.add(jLabel2);
        jLabel2.setBounds(375, 26, 163, 18);

        tbListClients.setAutoCreateRowSorter(true);
        tbListClients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbListClients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbClientMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbListClients);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(232, 193, 1040, 368);

        btnCancelar.setBackground(new java.awt.Color(0, 0, 255));
        btnCancelar.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        btnCancelar.setForeground(new java.awt.Color(255, 255, 255));
        btnCancelar.setText("CANCELAR");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar);
        btnCancelar.setBounds(19, 521, 184, 40);

        btnActualizar.setBackground(new java.awt.Color(0, 0, 255));
        btnActualizar.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        btnActualizar.setForeground(new java.awt.Color(255, 255, 255));
        btnActualizar.setText("ACTUALIZAR LISTA");
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });
        jPanel1.add(btnActualizar);
        btnActualizar.setBounds(19, 463, 184, 40);

        btnLimpiar.setBackground(new java.awt.Color(0, 0, 255));
        btnLimpiar.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setText("LIMPIAR REGISTRO");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpiar);
        btnLimpiar.setBounds(19, 405, 184, 40);

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 3, 24)); // NOI18N
        jLabel4.setText("LISTA DE CLIENTES");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(588, 151, 236, 30);

        jLabel6.setBackground(new java.awt.Color(255, 255, 255));
        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel6.setText("CORREO DEL CLIENTE");
        jLabel6.setAlignmentY(10.0F);
        jPanel1.add(jLabel6);
        jLabel6.setBounds(556, 26, 155, 18);

        lblErrorCorreo.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorCorreo.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorCorreo.setText("* Error, ingrese Correo válido");
        lblErrorCorreo.setAlignmentY(10.0F);
        jPanel1.add(lblErrorCorreo);
        lblErrorCorreo.setBounds(553, 91, 141, 13);

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel7.setText("DIRECCION DEL CLIENTE");
        jLabel7.setAlignmentY(10.0F);
        jPanel1.add(jLabel7);
        jLabel7.setBounds(731, 26, 172, 18);

        lblErrorDireccion.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorDireccion.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorDireccion.setText("* Error, ingrese Direccion válida");
        lblErrorDireccion.setAlignmentY(10.0F);
        jPanel1.add(lblErrorDireccion);
        lblErrorDireccion.setBounds(737, 91, 153, 13);

        jLabel8.setBackground(new java.awt.Color(255, 255, 255));
        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel8.setText("FECHA DE NACIMIENTO");
        jLabel8.setAlignmentY(10.0F);
        jPanel1.add(jLabel8);
        jLabel8.setBounds(921, 26, 164, 18);

        lblErrorFecha.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorFecha.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorFecha.setText("* Error, ingrese fecha válida");
        lblErrorFecha.setAlignmentY(10.0F);
        jPanel1.add(lblErrorFecha);
        lblErrorFecha.setBounds(927, 91, 135, 13);

        jLabel9.setBackground(new java.awt.Color(255, 255, 255));
        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel9.setText("TELEFONO DEL CLIENTE");
        jLabel9.setAlignmentY(10.0F);
        jPanel1.add(jLabel9);
        jLabel9.setBounds(1112, 26, 169, 18);

        lblErrorTelefono.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorTelefono.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorTelefono.setText("* Error, ingrese Telefono valido");
        lblErrorTelefono.setAlignmentY(10.0F);
        jPanel1.add(lblErrorTelefono);
        lblErrorTelefono.setBounds(1112, 91, 151, 13);

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel3.setText("NOMBRE DEL CLIENTE");
        jLabel3.setAlignmentY(10.0F);
        jPanel1.add(jLabel3);
        jLabel3.setBounds(197, 26, 157, 18);

        txtApellido.setBackground(new java.awt.Color(0, 153, 255));
        txtApellido.setForeground(new java.awt.Color(51, 0, 51));
        txtApellido.setToolTipText("");
        txtApellido.setAlignmentY(10.0F);
        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidoActionPerformed(evt);
            }
        });
        jPanel1.add(txtApellido);
        txtApellido.setBounds(375, 50, 160, 35);

        lblErrorNombre.setFont(new java.awt.Font("Lucida Sans", 0, 10)); // NOI18N
        lblErrorNombre.setForeground(new java.awt.Color(153, 0, 0));
        lblErrorNombre.setText("* Error, ingrese Nombre válido");
        lblErrorNombre.setAlignmentY(10.0F);
        jPanel1.add(lblErrorNombre);
        lblErrorNombre.setBounds(197, 91, 146, 13);

        txtNombre.setBackground(new java.awt.Color(0, 153, 255));
        txtNombre.setForeground(new java.awt.Color(51, 0, 51));
        txtNombre.setToolTipText("");
        txtNombre.setAlignmentY(10.0F);
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        jPanel1.add(txtNombre);
        txtNombre.setBounds(197, 50, 160, 35);

        txtCorreo.setBackground(new java.awt.Color(0, 153, 255));
        txtCorreo.setForeground(new java.awt.Color(51, 0, 51));
        txtCorreo.setToolTipText("");
        txtCorreo.setAlignmentY(10.0F);
        txtCorreo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCorreoActionPerformed(evt);
            }
        });
        jPanel1.add(txtCorreo);
        txtCorreo.setBounds(553, 50, 160, 35);

        txtDireccion.setBackground(new java.awt.Color(0, 153, 255));
        txtDireccion.setForeground(new java.awt.Color(51, 0, 51));
        txtDireccion.setToolTipText("");
        txtDireccion.setAlignmentY(10.0F);
        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDireccionActionPerformed(evt);
            }
        });
        jPanel1.add(txtDireccion);
        txtDireccion.setBounds(731, 50, 160, 35);

        txtFecha.setBackground(new java.awt.Color(0, 153, 255));
        txtFecha.setForeground(new java.awt.Color(51, 0, 51));
        txtFecha.setToolTipText("");
        txtFecha.setAlignmentY(10.0F);
        txtFecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFechaActionPerformed(evt);
            }
        });
        jPanel1.add(txtFecha);
        txtFecha.setBounds(921, 50, 160, 35);

        txtTelefono.setBackground(new java.awt.Color(0, 153, 255));
        txtTelefono.setForeground(new java.awt.Color(51, 0, 51));
        txtTelefono.setToolTipText("");
        txtTelefono.setAlignmentY(10.0F);
        txtTelefono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelefonoActionPerformed(evt);
            }
        });
        jPanel1.add(txtTelefono);
        txtTelefono.setBounds(1112, 50, 160, 35);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Logo.png"))); // NOI18N
        jPanel1.add(jLabel5);
        jLabel5.setBounds(35, 169, 168, 160);

        jButtonSearchNom.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchNom.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchNom.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchNom.setText("BUSCAR");
        jButtonSearchNom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchNomActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchNom);
        jButtonSearchNom.setBounds(197, 110, 160, 35);

        jButtonSearchDni.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchDni.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchDni.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchDni.setText("BUSCAR");
        jButtonSearchDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchDniActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchDni);
        jButtonSearchDni.setBounds(19, 110, 160, 35);

        jButtonSearchApe.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchApe.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchApe.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchApe.setText("BUSCAR");
        jButtonSearchApe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchApeActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchApe);
        jButtonSearchApe.setBounds(375, 110, 160, 35);

        jButtonSearchCorr.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchCorr.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchCorr.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchCorr.setText("BUSCAR");
        jButtonSearchCorr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchCorrActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchCorr);
        jButtonSearchCorr.setBounds(553, 110, 160, 35);

        jButtonSearchDire.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchDire.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchDire.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchDire.setText("BUSCAR");
        jButtonSearchDire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchDireActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchDire);
        jButtonSearchDire.setBounds(731, 110, 160, 35);

        jButtonSearchFec.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchFec.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchFec.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchFec.setText("BUSCAR");
        jButtonSearchFec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchFecActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchFec);
        jButtonSearchFec.setBounds(921, 113, 160, 29);

        jButtonSearchTel.setBackground(new java.awt.Color(0, 0, 255));
        jButtonSearchTel.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jButtonSearchTel.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSearchTel.setText("BUSCAR");
        jButtonSearchTel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchTelActionPerformed(evt);
            }
        });
        jPanel1.add(jButtonSearchTel);
        jButtonSearchTel.setBounds(1112, 113, 160, 29);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1299, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 583, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        Limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        ListarTabla();
        Limpiar();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        String Dni = txtDni.getText();
        String Nombre = txtNombre.getText();
        String Apellido = txtApellido.getText();
        String Correo = txtCorreo.getText();
        String Direccion = txtDireccion.getText();
        String Telefono = txtTelefono.getText();
        String Fecha = txtFecha.getText();

        if (Dni.equals("")) {
            Limpiare();
            lblErrorDni.setVisible(true);
            txtDni.requestFocus();
        } else if (Nombre.equals("")) {
            Limpiare();

            lblErrorNombre.setVisible(true);
            txtNombre.requestFocus();
        } else if (Apellido.equals("")) {
            Limpiare();

            lblErrorApellido.setVisible(true);
            txtApellido.requestFocus();
        } else if (Correo.equals("")) {
            Limpiare();

            lblErrorCorreo.setVisible(true);
            txtCorreo.requestFocus();
        } else if (Direccion.equals("")) {
            Limpiare();

            lblErrorDireccion.setVisible(true);
            txtDireccion.requestFocus();
        } else if (Fecha.equals("")) {
            Limpiare();

            lblErrorFecha.setVisible(true);
            txtFecha.requestFocus();
        }else if (Telefono.equals("")) {
            Limpiare();

            lblErrorTelefono.setVisible(true);
            txtTelefono.requestFocus();
        }  else {
            try {
                String ValDni = "SELECT * FROM tblClients WHERE Dni='" + Dni + "'";
                PreparedStatement PS = CN.prepareStatement(ValDni);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    JOptionPane.showMessageDialog(rootPane, "¡Error! el Cliente ya existe en la BD");
                } else {
                    String ConsInser = "INSERT INTO tblClients(Dni,"
                            + " Nombre,"
                            + " Apellido,"
                            + " Correo,"
                            + " Direccion,"
                            + " Telefono,Fecha ) "
                            + "VALUES ('" + Dni + "','" + Nombre + "','" + Apellido + "','" + Correo + "','" + Direccion + "','" + Telefono + "','" + Fecha + "')";
                    PreparedStatement PS1 = CN.prepareStatement(ConsInser);
                    PS1.executeUpdate();
                    JOptionPane.showMessageDialog(rootPane, "Cliente registrado con éxito");
                    ListarTabla();
                    Limpiar();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en el registro:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private void txtDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDniActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDniActionPerformed

    private void txtApellidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidoActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void txtCorreoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCorreoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCorreoActionPerformed

    private void txtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDireccionActionPerformed

    private void txtFechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFechaActionPerformed

    private void txtTelefonoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelefonoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTelefonoActionPerformed

    private void jButtonSearchNomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchNomActionPerformed
        String Nombre = txtNombre.getText();

        if (!Nombre.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Nombre LIKE'%" + Nombre + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtNombre.setText("");
                    txtNombre.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar un Nombre para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorNombre.setVisible(false);
            txtNombre.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchNomActionPerformed

    private void jButtonSearchDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchDniActionPerformed
        String Dni = txtDni.getText();

        if (!Dni.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Dni LIKE'%" + Dni + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtDni.setText("");
                    txtDni.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar un Dni para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorDni.setVisible(false);
            txtDni.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchDniActionPerformed

    private void jButtonSearchApeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchApeActionPerformed
        String Apellido = txtApellido.getText();

        if (!Apellido.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Apellido LIKE'%" + Apellido + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtApellido.setText("");
                    txtApellido.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar un Apellido para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorApellido.setVisible(false);
            txtApellido.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchApeActionPerformed

    private void jButtonSearchCorrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchCorrActionPerformed
        String Correo = txtCorreo.getText();

        if (!Correo.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Correo LIKE'%" + Correo + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtCorreo.setText("");
                    txtCorreo.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar un Correo para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorCorreo.setVisible(false);
            txtCorreo.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchCorrActionPerformed

    private void jButtonSearchDireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchDireActionPerformed
        String Direccion = txtDireccion.getText();

        if (!Direccion.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Direccion LIKE'%" + Direccion + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtDireccion.setText("");
                    txtDireccion.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar una Direccion para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorDireccion.setVisible(false);
            txtDireccion.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchDireActionPerformed

    private void jButtonSearchFecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchFecActionPerformed
        String Fecha = txtFecha.getText();

        if (!Fecha.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Fecha LIKE'%" + Fecha + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtFecha.setText("");
                    txtFecha.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar una Fecha para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorFecha.setVisible(false);
            txtFecha.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchFecActionPerformed

    private void jButtonSearchTelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchTelActionPerformed
        String Telefono = txtTelefono.getText();

        if (!Telefono.equalsIgnoreCase("")) {
            try {
                DefaultTableModel modelo = new DefaultTableModel() {
                    public boolean isCellEditable(int row, int column) {
                        return false;
                    }
                };
                modelo.addColumn("DNI");
                modelo.addColumn("NOMBRE");
                modelo.addColumn("APELLIDO");
                modelo.addColumn("CORREO ELECTRONICO    ");
                modelo.addColumn("DIRECCION      ");
                modelo.addColumn("TELEFONO");
                modelo.addColumn("FECHA DE NACIMIENTO");

                String ConsBuscar = "SELECT * FROM TblClients WHERE Telefono LIKE'%" + Telefono + "%'";
                PreparedStatement PS = CN.prepareStatement(ConsBuscar);
                ResultSet RS = PS.executeQuery();
                if (RS.next()) {
                    do {
                        Object[] Lista = {RS.getString(1), RS.getString(2), RS.getString(3), RS.getString(4), RS.getString(5), RS.getString(6), RS.getString(7),};
                        modelo.addRow(Lista);
                    } while (RS.next());
                    tbListClients.setModel(modelo);

                } else {
                    JOptionPane.showMessageDialog(rootPane,
                            "¡¡No existe el CLiente en la base de datos!!",
                            "¡Error!",
                            JOptionPane.ERROR_MESSAGE);
                    txtTelefono.setText("");
                    txtTelefono.requestFocus();
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane,
                        "Error en la consulta:" + e.getMessage(),
                        "¡Error!",
                        JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane,
                    "Debe ingresar un Telefono para validar",
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
            lblErrorTelefono.setVisible(false);
            txtTelefono.requestFocus();
        }
        Limpiar();
    }//GEN-LAST:event_jButtonSearchTelActionPerformed

    private void tbClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbClientMouseClicked
        try {
            int row = this.tbListClients.getSelectedRow();
            this.txtDni.setText(String.valueOf(this.tbListClients.getValueAt(row, 0)));
            this.txtNombre.setText(String.valueOf(this.tbListClients.getValueAt(row, 1)));
            this.txtApellido.setText(String.valueOf(this.tbListClients.getValueAt(row, 2)));
            this.txtCorreo.setText(String.valueOf(this.tbListClients.getValueAt(row, 3)));
            this.txtDireccion.setText(String.valueOf(this.tbListClients.getValueAt(row, 4)));
            this.txtFecha.setText(String.valueOf(this.tbListClients.getValueAt(row, 6)));
            this.txtTelefono.setText(String.valueOf(this.tbListClients.getValueAt(row, 5)));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane,
                    "Error en la consulta:" + e.getMessage(),
                    "¡Error!",
                    JOptionPane.ERROR_MESSAGE);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_tbClientMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmClientsC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmClientsC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmClientsC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmClientsC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmClientsC().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JButton jButtonSearchApe;
    private javax.swing.JButton jButtonSearchCorr;
    private javax.swing.JButton jButtonSearchDire;
    private javax.swing.JButton jButtonSearchDni;
    private javax.swing.JButton jButtonSearchFec;
    private javax.swing.JButton jButtonSearchNom;
    private javax.swing.JButton jButtonSearchTel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblErrorApellido;
    private javax.swing.JLabel lblErrorCorreo;
    private javax.swing.JLabel lblErrorDireccion;
    private javax.swing.JLabel lblErrorDni;
    private javax.swing.JLabel lblErrorFecha;
    private javax.swing.JLabel lblErrorNombre;
    private javax.swing.JLabel lblErrorTelefono;
    private javax.swing.JTable tbListClients;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtDni;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtTelefono;
    // End of variables declaration//GEN-END:variables
}
